// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc691.RobotCode.subsystems;

import org.usfirst.frc691.RobotCode.Robot;
import org.usfirst.frc691.RobotCode.RobotMap;
import org.usfirst.frc691.RobotCode.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;

// SUBSYSTEM FUNCTION: RUN THE GATEKEEPER MOTOR(S)

public class Keeper extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController keeperMotor = RobotMap.keeperKeeperMotor;
    private final AnalogInput keeperDetector = RobotMap.keeperKeeperDetector;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    // This function runs the keeper motor at a set speed.
    public void runKeeper() {
    	keeperMotor.set(1);
    }
    
    // This function runs the keeper motor reversely at a set speed.
    public void reverseKeeper() {
    	keeperMotor.set(-1);
    }
    
    // This function stops the keeper motor.
    public void stopKeeper() {
    	keeperMotor.set(0);
    }
    
    // This function returns whether the keeper has the ball or not.
    public boolean hasBall() { 
    	// Creates a double variable which uses the ultrasonic sensor
    	// to determine the open distance in front of it.
    	double keeperDistance = keeperDetector.getVoltage() / 0.0090;
    	
    	// If the distance is less than a set number of inches, the
    	// variable keeperSwitch will return true. Else it will return
    	// false. Effectively it will only return true when the ball
    	// is in the keeper system.
    	if (keeperDistance < 8) {
    		Robot.keeperSwitch = true;
    	} else {
    		Robot.keeperSwitch = false;
    	}
    	
    	// Returns the status of the keeper switch.
    	return Robot.keeperSwitch;
    }
}

