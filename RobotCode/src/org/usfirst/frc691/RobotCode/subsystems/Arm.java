// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc691.RobotCode.subsystems;

import org.usfirst.frc691.RobotCode.Robot;
import org.usfirst.frc691.RobotCode.RobotMap;
import org.usfirst.frc691.RobotCode.commands.*;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.command.Subsystem;

// SUBSYSTEM FUNCTION: RUN THE DEFENSE ARM MOTOR(S)

public class Arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController armMotor = RobotMap.armArmMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
   
    // This function runs the arm motor at a set speed.
    public void runArm() {
    	Robot.arm.armMotor.set(-0.7);
    }
   
    // This function runs the arm motor reversely at a set speed.
    public void reverseArm() {
    	Robot.arm.armMotor.set(0.7);
    }
   
    // This function stops the arm motor.
    public void stopArm() {
    	Robot.arm.armMotor.set(0);
    }
    
    // This function was created for the low bar autonomous command.
    // It runs the arm motor for a set amount of time.
    public void downArm() {
    	Robot.arm.armMotor.set(-1);
    	
    	// Calls Thread.sleep(). In milliseconds (1000ms = approx. 1 s)
    	// the amount of time the arm should keep running.
    	try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    	Robot.arm.armMotor.set(0);
    }
}
