// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc691.RobotCode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Victor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainLeftFront;
    public static SpeedController driveTrainLeftRear;
    public static SpeedController driveTrainRightFront;
    public static SpeedController driveTrainRightRear;
    public static RobotDrive driveTrainRobotDrive;
    public static DigitalInput driveTrainDriveDetector;
    public static SpeedController intakeIntakeMotor;
    public static SpeedController keeperKeeperMotor;
    public static AnalogInput keeperKeeperDetector;
    public static SpeedController shooterShooterMotor;
    public static SpeedController armArmMotor;
    public static SpeedController climbClimbMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFront = new Victor(0);
        LiveWindow.addActuator("DriveTrain", "LeftFront", (Victor) driveTrainLeftFront);
        
        driveTrainLeftRear = new Spark(1);
        LiveWindow.addActuator("DriveTrain", "LeftRear", (Spark) driveTrainLeftRear);
        
        driveTrainRightFront = new Spark(7);
        LiveWindow.addActuator("DriveTrain", "RightFront", (Spark) driveTrainRightFront);
        
        driveTrainRightRear = new Victor(3);
        LiveWindow.addActuator("DriveTrain", "RightRear", (Victor) driveTrainRightRear);
        
        driveTrainRobotDrive = new RobotDrive(driveTrainLeftFront, driveTrainLeftRear,
              driveTrainRightFront, driveTrainRightRear);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.01);
        driveTrainRobotDrive.setMaxOutput(1.0);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveTrainDriveDetector = new DigitalInput(0);
        LiveWindow.addSensor("DriveTrain", "DriveDetector", driveTrainDriveDetector);
        
        intakeIntakeMotor = new Victor(4);
        LiveWindow.addActuator("Intake", "IntakeMotor", (Victor) intakeIntakeMotor);
        
        keeperKeeperMotor = new Spark(5);
        LiveWindow.addActuator("Keeper", "KeeperMotor", (Spark) keeperKeeperMotor);
        
        keeperKeeperDetector = new AnalogInput(0);
        LiveWindow.addSensor("Keeper", "KeeperDetector", keeperKeeperDetector);
        
        shooterShooterMotor = new Victor(6);
        LiveWindow.addActuator("Shooter", "ShooterMotor", (Victor) shooterShooterMotor);
        
        armArmMotor = new Spark(2);
        LiveWindow.addActuator("Arm", "ArmMotor", (Spark) armArmMotor);
        
        climbClimbMotor = new Talon(8);
        LiveWindow.addActuator("Climb", "ClimbMotor", (Talon) climbClimbMotor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
